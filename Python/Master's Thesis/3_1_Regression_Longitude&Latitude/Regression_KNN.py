# -*- coding: utf-8 -*-
"""FP_Regression_KNN_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mw9wCKs-ylhClCIsYaS-hM4cg7vRRTca
"""

#匯入套件
import numpy as np
import pandas as pd
import pickle

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline

from sklearn.preprocessing import StandardScaler

import warnings
warnings.filterwarnings('ignore')

#匯入資料
X_org = pd.read_csv("X_df.csv",index_col=0)
y_org = pd.read_csv("y_df.csv",index_col=0)

X_org.shape,y_org.shape

#資料分割，分成train和test
X_train_org, X_test_org = train_test_split(X_org, test_size = 0.2,random_state = 1)
y_train_org, y_test_org = train_test_split(y_org, test_size = 0.2,random_state = 1)

#選取train及test標籤為經緯度
X_train = np.array(X_train_org)
y_train = y_train_org[['LATITUDE','LONGITUDE']]

X_test = np.array(X_test_org)
y_test = y_test_org[['LATITUDE','LONGITUDE']]

X_train.shape,y_train.shape,X_test.shape,y_test.shape

#KNN模型訓練
from sklearn.neighbors import KNeighborsRegressor
reg_knn = KNeighborsRegressor()

#KNN參數設置

grid_param_knn = {
    'n_neighbors': [2,3,5,7],
    'weights': ['uniform','distance'],
    'metric': ['euclidean','minkowski','manhattan'],
    'n_jobs': [-1]
}

#網格搜尋和交叉驗證
#使用K=5
from sklearn.model_selection import GridSearchCV

grid_search_knn = GridSearchCV(estimator=reg_knn, param_grid=grid_param_knn, cv=5, scoring='r2')

#找出最佳參數組合-網格搜尋
grid_search_knn.fit(X_train, y_train)

#最佳參數組合得出的R2
grid_search_knn.best_score_

#網格搜尋結果
grid_search_knn.cv_results_

#網格搜尋結果(表格顯示)
pd.DataFrame(grid_search_knn.cv_results_)

#最佳參數組合
grid_search_knn.best_params_

#衡量線性迴歸的MSE、RMSE、MAE、R2
from math import sqrt
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

#KNN帶入最佳參數組合
print("KNN")
#訓練模型
regr_knn_n = KNeighborsRegressor(n_neighbors=3, weights='distance', metric='euclidean', n_jobs=-1)
regr_knn_n.fit(X_train, y_train)
print("訓練模型-KNN")

#使用測試資料集預測資料
y_predict_test_knn = regr_knn_n.predict(X_test)
print("預測資料-KNN")

#績效評估
print("績效評估-KNN")
print("驗證資料-KNN")
print("MAE:",mean_absolute_error(y_test,y_predict_test_knn))
print("MSE:",mean_squared_error(y_test,y_predict_test_knn))
print("RMSE:",sqrt(mean_squared_error(y_test,y_predict_test_knn)))
print("R2:",r2_score(y_test,y_predict_test_knn))

